#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "../../Shaders/Includes/Inputs/CameraParams.hlsl"
#include "../../Shaders/Includes/Transform.hlsl"

#define BUFFER_WIDTH _Width
#define BUFFER_HEIGHT _Height

int _Width;
int _Height;

#include "../../Shaders/Includes/Connectivity.hlsl"

#pragma kernel Main
RWTexture2D<float4> _ConnectivityMap;
uint _SamplingScale;

[numthreads(8,8,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    if(id.x > uint(_Width) || id.y > uint(_Height)) return;

    int2 sourceCoord = int2(id.xy);
    float4 result = float4(0.0, 0.0, 0.0, 0.0);
    float3 debug = float3(0.0, 0.0, 0.0);

    uint connected = 0;
    uint closer = 0;
    uint center = ((id.x % _SamplingScale) == (_SamplingScale / 2) && (id.y % _SamplingScale) == (_SamplingScale / 2)) ? 1 : 0;

    CheckConnected(sourceCoord, sourceCoord + int2(1, 0), connected, closer);
    result.x = PackFloatInt8bit(0.0, (connected << 7) + (closer << 6) + (center << 5), 256.0);

    CheckConnected(sourceCoord, sourceCoord + int2(0, 1), connected, closer);
    result.y = PackFloatInt8bit(0.0, (connected << 7) + (closer << 6) + (center << 5), 256.0);

    CheckConnected(sourceCoord, sourceCoord - int2(1, 0), connected, closer);
    result.z = PackFloatInt8bit(0.0, (connected << 7) + (closer << 6) + (center << 5), 256.0);

    CheckConnected(sourceCoord, sourceCoord - int2(0, 1), connected, closer);
    result.w = PackFloatInt8bit(0.0, (connected << 7) + (closer << 6) + (center << 5), 256.0);


    _ConnectivityMap[id.xy] = result;
}